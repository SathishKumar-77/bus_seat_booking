// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  buses     Bus[]    @relation("OperatorBuses")
  bookings  Booking[] @relation("UserBookings")
  recurringTrips   RecurringTrip[] // ðŸ‘ˆ Add this line


  @@map("users")
}

model OperatorKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")
  usedBy    Int?     // User ID who used this key
  createdBy Int      // Admin user ID who created this key

  @@map("operator_keys")
}

enum Role {
  USER
  BUS_OPERATOR
  ADMIN
}



model Bus {
  id          Int      @id @default(autoincrement())
  name        String
  numberPlate String @unique
  routeFrom   String
  routeTo     String
  acType      String
  type        String
  seatCount   Int
  operatorId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  priceSeater  Float   // ðŸ‘ˆ add this
  priceSleeper Float   // ðŸ‘ˆ add this

  operator    User     @relation("OperatorBuses", fields: [operatorId], references: [id])
  trips       Trip[]
  seats       Seat[]
  bookings    Booking[] @relation("BusBookings")
  recurringTrips RecurringTrip[]
}





model Seat {
  id        Int    @id @default(autoincrement())
  busId     Int
  seatNumber String
  type      String // sleeper / seater
  position  String // upper / lower
  price     Int
  status    String @default("available") // Ensure this line is present

  bus       Bus    @relation(fields: [busId], references: [id])
  bookings  Booking[] @relation("BookedSeats")
  bookedSeats BookedSeats[] // Opposite relation field added here

  @@map("seats")
}
model Trip {
  id        Int      @id @default(autoincrement())
  busId     Int
  bus       Bus      @relation(fields: [busId], references: [id])
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model RecurringTrip {
  id            Int      @id @default(autoincrement())
  busId         Int
  operatorId    Int
  departureTime String   // "22:00"
  arrivalTime   String   // "05:30"
  daysOfWeek    String[] // e.g., ["Mon", "Wed", "Fri"]

  bus           Bus      @relation(fields: [busId], references: [id])
  operator      User     @relation(fields: [operatorId], references: [id])
}


model Booking {
  id          Int        @id @default(autoincrement())
  busId       Int
  userId      Int?       // Optional: Link to the user who made the booking
  totalPrice  Float
  date        DateTime   // New field to specify the booking date
  createdAt   DateTime   @default(now()) @map("created_at")

  updatedAt   DateTime   @updatedAt @map("updated_at")
  status      String     @default("confirmed") // e.g., confirmed, pending, cancelled

  bus         Bus        @relation(fields: [busId], references: [id], name: "BusBookings")
  user        User?      @relation(fields: [userId], references: [id], name: "UserBookings")
  seats       Seat[]     @relation("BookedSeats")
  passengers  Passenger[]
  bookedSeats BookedSeats[]

  @@map("bookings")
}



model BookedSeats {
  id        Int      @id @default(autoincrement())
  bookingId Int
  seatId    Int
  bookingDate DateTime // New field to store the booking date
  createdAt DateTime @default(now()) @map("created_at")

  booking   Booking  @relation(fields: [bookingId], references: [id])
  seat      Seat     @relation(fields: [seatId], references: [id])

  @@unique([bookingId, seatId]) // Ensure no duplicate booking-seat combinations
  @@map("BookedSeats")
}

model Passenger {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  name        String
  gender      String   // e.g., male, female, other
  age         Int
  createdAt   DateTime @default(now()) @map("created_at")

  booking     Booking  @relation(fields: [bookingId], references: [id])

  @@map("passengers")
}